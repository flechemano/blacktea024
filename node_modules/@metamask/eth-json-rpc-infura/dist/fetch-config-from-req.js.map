{"version":3,"file":"fetch-config-from-req.js","sourceRoot":"","sources":["../src/fetch-config-from-req.ts"],"names":[],"mappings":";;;AAiBA;;;;;;;;;;;;;;;GAeG;AACH,SAAgB,kBAAkB,CAAC,EACjC,OAAO,EACP,SAAS,EACT,YAAY,GAAG,EAAE,EACjB,GAAG,EACH,MAAM,GAOP;IACC,wEAAwE;IACxE,MAAM,aAAa,GAAG,GAAG,CAAC,MAAM,IAAI,UAAU,CAAC;IAC/C,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,YAAY,EAAE;QAC9C,MAAM,EAAE,kBAAkB;QAC1B,cAAc,EAAE,kBAAkB;KACnC,CAAC,CAAC;IAEH,IAAI,MAAM,EAAE;QACV,OAAO,CAAC,eAAe,CAAC,GAAG,GAAG,MAAM,IAAI,aAAa,EAAE,CAAC;KACzD;IAED,OAAO;QACL,QAAQ,EAAE,WAAW,OAAO,iBAAiB,SAAS,EAAE;QACxD,WAAW,EAAE;YACX,MAAM,EAAE,MAAM;YACd,OAAO;YACP,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;SACxC;KACF,CAAC;AACJ,CAAC;AAhCD,gDAgCC;AAED;;;;;GAKG;AACH,SAAS,YAAY,CACnB,GAA0C;IAE1C,OAAO;QACL,EAAE,EAAE,GAAG,CAAC,EAAE;QACV,OAAO,EAAE,GAAG,CAAC,OAAO;QACpB,MAAM,EAAE,GAAG,CAAC,MAAM;QAClB,MAAM,EAAE,GAAG,CAAC,MAAM;KACnB,CAAC;AACJ,CAAC","sourcesContent":["import type { JsonRpcParams, JsonRpcRequest } from '@metamask/utils';\n\nimport type {\n  ExtendedJsonRpcRequest,\n  RequestHeaders,\n  InfuraJsonRpcSupportedNetwork,\n} from './types';\n\ntype FetchConfig = {\n  fetchUrl: string;\n  fetchParams: {\n    method: string;\n    headers: RequestHeaders;\n    body: string;\n  };\n};\n\n/**\n * Determines the arguments to feed into `fetch` in order to make a request to\n * Infura.\n * @param options - The options.\n * @param options.network - A network that Infura supports; plugs into\n * `https://${network}.infura.io`.\n * @param options.projectId - The Infura project id.\n * @param options.extraHeaders - Extra headers that will be used to make the\n * request.\n * @param options.req - The original request object obtained via the\n * middleware stack.\n * @param options.source - A descriptor for the entity making the request;\n * tracked by Infura for analytics purposes.\n * @returns An object containing the URL and a bag of options, both of which\n * will be passed to `fetch`.\n */\nexport function fetchConfigFromReq({\n  network,\n  projectId,\n  extraHeaders = {},\n  req,\n  source,\n}: {\n  network: InfuraJsonRpcSupportedNetwork;\n  projectId: string;\n  extraHeaders?: RequestHeaders;\n  req: ExtendedJsonRpcRequest<JsonRpcParams>;\n  source?: string;\n}): FetchConfig {\n  // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n  const requestOrigin = req.origin || 'internal';\n  const headers = Object.assign({}, extraHeaders, {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  });\n\n  if (source) {\n    headers['Infura-Source'] = `${source}/${requestOrigin}`;\n  }\n\n  return {\n    fetchUrl: `https://${network}.infura.io/v3/${projectId}`,\n    fetchParams: {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(normalizeReq(req)),\n    },\n  };\n}\n\n/**\n * Strips out extra keys from a request object that could be rejected by strict\n * nodes like parity.\n * @param req - The original request object obtained via the middleware stack.\n * @returns An object that describes a JSON-RPC request.\n */\nfunction normalizeReq(\n  req: ExtendedJsonRpcRequest<JsonRpcParams>,\n): JsonRpcRequest {\n  return {\n    id: req.id,\n    jsonrpc: req.jsonrpc,\n    method: req.method,\n    params: req.params,\n  };\n}\n"]}