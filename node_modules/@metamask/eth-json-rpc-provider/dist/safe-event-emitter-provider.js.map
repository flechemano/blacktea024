{"version":3,"file":"safe-event-emitter-provider.js","sourceRoot":"","sources":["../src/safe-event-emitter-provider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AACA,sFAA4D;AAG5D;;;;;GAKG;AACH,MAAa,wBAAyB,SAAQ,4BAAgB;IAG5D;;;;;OAKG;IACH,YAAY,EAAE,MAAM,EAA6B;QAC/C,KAAK,EAAE,CAAC;QATV,mDAAuB;QAmBvB;;;;;WAKG;QACH,cAAS,GAAG,CACV,GAAmB;QACnB,gCAAgC;QAChC,8DAA8D;QAC9D,QAAqD,EACrD,EAAE;YACF,uBAAA,IAAI,wCAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC;QAEF;;;;;;;;;WASG;QACH,SAAI,GAAG,CACL,GAAmB;QACnB,gCAAgC;QAChC,8DAA8D;QAC9D,QAAqD,EACrD,EAAE;YACF,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;gBAClC,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;aAC5D;YACD,uBAAA,IAAI,wCAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC;QA5CA,uBAAA,IAAI,oCAAW,MAAM,MAAA,CAAC;QAEtB,IAAI,MAAM,CAAC,EAAE,EAAE;YACb,MAAM,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC,OAAe,EAAE,EAAE;gBAC5C,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;CAsCF;AAxDD,4DAwDC","sourcesContent":["import type { JsonRpcEngine } from '@metamask/json-rpc-engine';\nimport SafeEventEmitter from '@metamask/safe-event-emitter';\nimport type { JsonRpcRequest } from '@metamask/utils';\n\n/**\n * An Ethereum provider.\n *\n * This provider loosely follows conventions that pre-date EIP-1193.\n * It is not compliant with any Ethereum provider standard.\n */\nexport class SafeEventEmitterProvider extends SafeEventEmitter {\n  #engine: JsonRpcEngine;\n\n  /**\n   * Construct a SafeEventEmitterProvider from a JSON-RPC engine.\n   *\n   * @param options - Options.\n   * @param options.engine - The JSON-RPC engine used to process requests.\n   */\n  constructor({ engine }: { engine: JsonRpcEngine }) {\n    super();\n    this.#engine = engine;\n\n    if (engine.on) {\n      engine.on('notification', (message: string) => {\n        this.emit('data', null, message);\n      });\n    }\n  }\n\n  /**\n   * Send a provider request asynchronously.\n   *\n   * @param req - The request to send.\n   * @param callback - A function that is called upon the success or failure of the request.\n   */\n  sendAsync = (\n    req: JsonRpcRequest,\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callback: (error: unknown, providerRes?: any) => void,\n  ) => {\n    this.#engine.handle(req, callback);\n  };\n\n  /**\n   * Send a provider request asynchronously.\n   *\n   * This method serves the same purpose as `sendAsync`. It only exists for\n   * legacy reasons.\n   *\n   * @deprecated Use `sendAsync` instead.\n   * @param req - The request to send.\n   * @param callback - A function that is called upon the success or failure of the request.\n   */\n  send = (\n    req: JsonRpcRequest,\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callback: (error: unknown, providerRes?: any) => void,\n  ) => {\n    if (typeof callback !== 'function') {\n      throw new Error('Must provide callback to \"send\" method.');\n    }\n    this.#engine.handle(req, callback);\n  };\n}\n"]}