{"version":3,"file":"errors.js","sourceRoot":"","sources":["../src/errors.ts"],"names":[],"mappings":";;;AAAA,2CAAwD;AAExD;;;;;;;;;;;;GAYG;AACI,MAAM,eAAe,GAAG,CAAC,KAAe,EAAU,EAAE;IACzD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAO,KAAK,CAAC;KACd;IAED,IAAI,KAAK,YAAY,KAAK,EAAE;QAC1B,OAAO,KAAK,CAAC,OAAO,CAAC;KACtB;IAED,IACE,IAAA,gBAAQ,EAAC,KAAK,CAAC;QACf,IAAA,mBAAW,EAAC,KAAK,EAAE,SAAS,CAAC;QAC7B,OAAO,KAAK,CAAC,OAAO,KAAK,QAAQ,EACjC;QACA,OAAO,KAAK,CAAC,OAAO,CAAC;KACtB;IAED,OAAO,gBAAgB,CAAC;AAC1B,CAAC,CAAC;AAlBW,QAAA,eAAe,mBAkB1B;AAEF;;;;;;;GAOG;AACI,MAAM,aAAa,GAAG,CAAC,KAAe,EAAsB,EAAE;IACnE,IAAI,KAAK,YAAY,KAAK,EAAE;QAC1B,OAAO,KAAK,CAAC,KAAK,CAAC;KACpB;IAED,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AANW,QAAA,aAAa,iBAMxB;AAEF;;;GAGG;AACH,MAAa,WAAY,SAAQ,KAAK;IAGpC,YAAY,OAAe,EAAE,aAAuB;QAClD,KAAK,CAAC,OAAO,CAAC,CAAC;QAHR,SAAI,GAAG,aAAa,CAAC;QAK5B,MAAM,aAAa,GAAG,IAAA,qBAAa,EAAC,aAAa,CAAC,CAAC;QACnD,IAAI,aAAa,EAAE;YACjB,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;SAC5B;IACH,CAAC;CACF;AAXD,kCAWC","sourcesContent":["import { hasProperty, isObject } from '@metamask/utils';\n\n/**\n * Attempt to get an error message from a value.\n *\n * - If the value is an error, the error's message is returned.\n * - If the value is an object with a `message` property, the value of that\n * property is returned.\n * - If the value is a string, the value is returned.\n * - Otherwise, \"Unknown error.\" is returned.\n *\n * @param error - The value to get an error message from.\n * @returns The error message.\n * @internal\n */\nexport const getErrorMessage = (error?: unknown): string => {\n  if (typeof error === 'string') {\n    return error;\n  }\n\n  if (error instanceof Error) {\n    return error.message;\n  }\n\n  if (\n    isObject(error) &&\n    hasProperty(error, 'message') &&\n    typeof error.message === 'string'\n  ) {\n    return error.message;\n  }\n\n  return 'Unknown error.';\n};\n\n/**\n * Get the error stack from a value. If the value is an error, the error's stack\n * is returned. Otherwise, it returns `undefined`.\n *\n * @param error - The value to get an error stack from.\n * @returns The error stack, or `undefined` if the value is not an error.\n * @internal\n */\nexport const getErrorStack = (error?: unknown): string | undefined => {\n  if (error instanceof Error) {\n    return error.stack;\n  }\n\n  return undefined;\n};\n\n/**\n * An error that is thrown when the ABI encoder or decoder encounters an\n * issue.\n */\nexport class ParserError extends Error {\n  readonly name = 'ParserError';\n\n  constructor(message: string, originalError?: unknown) {\n    super(message);\n\n    const originalStack = getErrorStack(originalError);\n    if (originalStack) {\n      this.stack = originalStack;\n    }\n  }\n}\n"]}