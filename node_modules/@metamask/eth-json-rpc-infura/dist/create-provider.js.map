{"version":3,"file":"create-provider.js","sourceRoot":"","sources":["../src/create-provider.ts"],"names":[],"mappings":";;;AAAA,2EAAqE;AAErE,+DAA0D;AAG1D,yEAAoE;AAEpE;;;;;;;;GAQG;AACH,SAAgB,cAAc,CAC5B,IAAmC;IAEnC,MAAM,MAAM,GAAG,IAAI,+BAAa,EAAE,CAAC;IACnC,MAAM,CAAC,IAAI,CAAC,IAAA,iDAAsB,EAAC,IAAI,CAAC,CAAC,CAAC;IAC1C,OAAO,IAAA,0CAAkB,EAAC,MAAM,CAAC,CAAC;AACpC,CAAC;AAND,wCAMC","sourcesContent":["import { providerFromEngine } from '@metamask/eth-json-rpc-provider';\nimport type { SafeEventEmitterProvider } from '@metamask/eth-json-rpc-provider';\nimport { JsonRpcEngine } from '@metamask/json-rpc-engine';\n\nimport type { CreateInfuraMiddlewareOptions } from './create-infura-middleware';\nimport { createInfuraMiddleware } from './create-infura-middleware';\n\n/**\n * Creates a provider (as defined in\n * [`eth-json-rpc-provider`](https://github.com/MetaMask/eth-json-rpc-provider)\n * which is preloaded with middleware specialized for interfacing with Infura\n * JSON-RPC endpoints.\n * @param opts - Options to {@link createInfuraMiddleware}.\n * @returns The provider as returned by `providerFromEngine` (a part of\n * [`eth-json-rpc-provider`](https://github.com/MetaMask/eth-json-rpc-provider)).\n */\nexport function createProvider(\n  opts: CreateInfuraMiddlewareOptions,\n): SafeEventEmitterProvider {\n  const engine = new JsonRpcEngine();\n  engine.push(createInfuraMiddleware(opts));\n  return providerFromEngine(engine);\n}\n"]}