{"version":3,"file":"buffer.js","sourceRoot":"","sources":["../../src/utils/buffer.ts"],"names":[],"mappings":";;;AAAA,2CAA8C;AAE9C,MAAM,YAAY,GAAG,EAAE,CAAC;AAExB;;;;;;;GAOG;AACI,MAAM,GAAG,GAAG,CACjB,MAAkB,EAClB,MAAkB,EAClB,QAAgB,EACJ,EAAE;IACd,OAAO,IAAA,mBAAW,EAAC;QACjB,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC;QAC5B,MAAM;QACN,MAAM,CAAC,QAAQ,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC;KAC1C,CAAC,CAAC;AACL,CAAC,CAAC;AAVW,QAAA,GAAG,OAUd;AAEF;;;;;;;GAOG;AACI,MAAM,QAAQ,GAAG,CACtB,MAAkB,EAClB,MAAM,GAAG,YAAY,EACT,EAAE;IACd,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CACtE,IAAI,CACL,CAAC;IAEF,OAAO,IAAA,mBAAW,EAAC,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC;AATW,QAAA,QAAQ,YASnB;AAEF;;;;;;;GAOG;AACI,MAAM,MAAM,GAAG,CACpB,MAAkB,EAClB,MAAM,GAAG,YAAY,EACT,EAAE;IACd,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CACtE,IAAI,CACL,CAAC;IAEF,OAAO,IAAA,mBAAW,EAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC;AATW,QAAA,MAAM,UASjB","sourcesContent":["import { concatBytes } from '@metamask/utils';\n\nconst BUFFER_WIDTH = 32;\n\n/**\n * Set `buffer` in `target` at the specified position.\n *\n * @param target - The buffer to set to.\n * @param buffer - The buffer to set in the target.\n * @param position - The position at which to set the target.\n * @returns The combined buffer.\n */\nexport const set = (\n  target: Uint8Array,\n  buffer: Uint8Array,\n  position: number,\n): Uint8Array => {\n  return concatBytes([\n    target.subarray(0, position),\n    buffer,\n    target.subarray(position + buffer.length),\n  ]);\n};\n\n/**\n * Add padding to a buffer. If the buffer is larger than `length`, this function won't do anything. If it's smaller, the\n * buffer will be padded to the specified length, with extra zeroes at the start.\n *\n * @param buffer - The buffer to add padding to.\n * @param length - The number of bytes to pad the buffer to.\n * @returns The padded buffer.\n */\nexport const padStart = (\n  buffer: Uint8Array,\n  length = BUFFER_WIDTH,\n): Uint8Array => {\n  const padding = new Uint8Array(Math.max(length - buffer.length, 0)).fill(\n    0x00,\n  );\n\n  return concatBytes([padding, buffer]);\n};\n\n/**\n * Add padding to a buffer. If the buffer is larger than `length`, this function won't do anything. If it's smaller, the\n * buffer will be padded to the specified length, with extra zeroes at the end.\n *\n * @param buffer - The buffer to add padding to.\n * @param length - The number of bytes to pad the buffer to.\n * @returns The padded buffer.\n */\nexport const padEnd = (\n  buffer: Uint8Array,\n  length = BUFFER_WIDTH,\n): Uint8Array => {\n  const padding = new Uint8Array(Math.max(length - buffer.length, 0)).fill(\n    0x00,\n  );\n\n  return concatBytes([buffer, padding]);\n};\n"]}