import type { BlockHeader } from './header.js';
import type { Common } from '@ethereumjs/common';
import type { JsonRpcTx, JsonTx, TransactionType, TxData } from '@ethereumjs/tx';
import type { AddressLike, BigIntLike, BytesLike, JsonRpcWithdrawal, PrefixedHexString, WithdrawalBytes, WithdrawalData } from '@ethereumjs/util';
/**
 * An object to set to which blockchain the blocks and their headers belong. This could be specified
 * using a {@link Common} object, or `chain` and `hardfork`. Defaults to mainnet without specifying a
 * hardfork.
 */
export interface BlockOptions {
    /**
     * A {@link Common} object defining the chain and the hardfork a block/block header belongs to.
     *
     * Object will be internally copied so that tx behavior don't incidentally
     * change on future HF changes.
     *
     * Default: {@link Common} object set to `mainnet` and the HF currently defined as the default
     * hardfork in the {@link Common} class.
     *
     * Current default hardfork: `merge`
     */
    common?: Common;
    /**
     * Set the hardfork either by timestamp (for HFs from Shanghai onwards) or by block number
     * for older Hfs.
     *
     * Additionally it is possible to pass in a specific TD value to support live-Merge-HF
     * transitions. Note that this should only be needed in very rare and specific scenarios.
     *
     * Default: `false` (HF is set to whatever default HF is set by the {@link Common} instance)
     */
    setHardfork?: boolean | BigIntLike;
    /**
     * If a preceding {@link BlockHeader} (usually the parent header) is given the preceding
     * header will be used to calculate the difficulty for this block and the calculated
     * difficulty takes precedence over a provided static `difficulty` value.
     *
     * Note that this option has no effect on networks other than PoW/Ethash networks
     * (respectively also deactivates on the Merge HF switching to PoS/Casper).
     */
    calcDifficultyFromHeader?: BlockHeader;
    /**
     * A block object by default gets frozen along initialization. This gives you
     * strong additional security guarantees on the consistency of the block parameters.
     * It also enables block hash caching when the `hash()` method is called multiple times.
     *
     * If you need to deactivate the block freeze - e.g. because you want to subclass block and
     * add additional properties - it is strongly encouraged that you do the freeze yourself
     * within your code instead.
     *
     * Default: true
     */
    freeze?: boolean;
    /**
     * Provide a clique signer's privateKey to seal this block.
     * Will throw if provided on a non-PoA chain.
     */
    cliqueSigner?: Uint8Array;
    /**
     *  Skip consensus format validation checks on header if set. Defaults to false.
     */
    skipConsensusFormatValidation?: boolean;
}
export interface VerkleProof {
    commitmentsByPath: PrefixedHexString[];
    d: PrefixedHexString;
    depthExtensionPresent: PrefixedHexString;
    ipaProof: {
        cl: PrefixedHexString[];
        cr: PrefixedHexString[];
        finalEvaluation: PrefixedHexString;
    };
    otherStems: PrefixedHexString[];
}
export interface VerkleStateDiff {
    stem: PrefixedHexString;
    suffixDiffs: {
        currentValue: PrefixedHexString | null;
        newValue: PrefixedHexString | null;
        suffix: number | string;
    }[];
}
/**
 * Experimental, object format could eventual change.
 * An object that provides the state and proof necessary for verkle stateless execution
 * */
export interface VerkleExecutionWitness {
    /**
     * An array of state diffs.
     * Each item corresponding to state accesses or state modifications of the block.
     * In the current design, it also contains the resulting state of the block execution (post-state).
     */
    stateDiff: VerkleStateDiff[];
    /**
     * The verkle proof for the block.
     * Proves that the provided stateDiff belongs to the canonical verkle tree.
     */
    verkleProof: VerkleProof;
}
/**
 * A block header's data.
 */
export interface HeaderData {
    parentHash?: BytesLike;
    uncleHash?: BytesLike;
    coinbase?: AddressLike;
    stateRoot?: BytesLike;
    transactionsTrie?: BytesLike;
    receiptTrie?: BytesLike;
    logsBloom?: BytesLike;
    difficulty?: BigIntLike;
    number?: BigIntLike;
    gasLimit?: BigIntLike;
    gasUsed?: BigIntLike;
    timestamp?: BigIntLike;
    extraData?: BytesLike;
    mixHash?: BytesLike;
    nonce?: BytesLike;
    baseFeePerGas?: BigIntLike;
    withdrawalsRoot?: BytesLike;
    blobGasUsed?: BigIntLike;
    excessBlobGas?: BigIntLike;
    parentBeaconBlockRoot?: BytesLike;
}
/**
 * A block's data.
 */
export interface BlockData {
    /**
     * Header data for the block
     */
    header?: HeaderData;
    transactions?: Array<TxData[TransactionType]>;
    uncleHeaders?: Array<HeaderData>;
    withdrawals?: Array<WithdrawalData>;
    /**
     * EIP-6800: Verkle Proof Data (experimental)
     */
    executionWitness?: VerkleExecutionWitness | null;
}
export declare type WithdrawalsBytes = WithdrawalBytes[];
export declare type ExecutionWitnessBytes = Uint8Array;
export declare type BlockBytes = [BlockHeaderBytes, TransactionsBytes, UncleHeadersBytes] | [BlockHeaderBytes, TransactionsBytes, UncleHeadersBytes, WithdrawalsBytes] | [
    BlockHeaderBytes,
    TransactionsBytes,
    UncleHeadersBytes,
    WithdrawalsBytes,
    ExecutionWitnessBytes
];
/**
 * BlockHeaderBuffer is a Buffer array, except for the Verkle PreState which is an array of prestate arrays.
 */
export declare type BlockHeaderBytes = Uint8Array[];
export declare type BlockBodyBytes = [TransactionsBytes, UncleHeadersBytes, WithdrawalsBytes?];
/**
 * TransactionsBytes can be an array of serialized txs for Typed Transactions or an array of Uint8Array Arrays for legacy transactions.
 */
export declare type TransactionsBytes = Uint8Array[][] | Uint8Array[];
export declare type UncleHeadersBytes = Uint8Array[][];
/**
 * An object with the block's data represented as strings.
 */
export interface JsonBlock {
    /**
     * Header data for the block
     */
    header?: JsonHeader;
    transactions?: JsonTx[];
    uncleHeaders?: JsonHeader[];
    withdrawals?: JsonRpcWithdrawal[];
    executionWitness?: VerkleExecutionWitness | null;
}
/**
 * An object with the block header's data represented as strings.
 */
export interface JsonHeader {
    parentHash?: string;
    uncleHash?: string;
    coinbase?: string;
    stateRoot?: string;
    transactionsTrie?: string;
    receiptTrie?: string;
    logsBloom?: string;
    difficulty?: string;
    number?: string;
    gasLimit?: string;
    gasUsed?: string;
    timestamp?: string;
    extraData?: string;
    mixHash?: string;
    nonce?: string;
    baseFeePerGas?: string;
    withdrawalsRoot?: string;
    blobGasUsed?: string;
    excessBlobGas?: string;
    parentBeaconBlockRoot?: string;
}
export interface JsonRpcBlock {
    number: string;
    hash: string;
    parentHash: string;
    mixHash?: string;
    nonce: string;
    sha3Uncles: string;
    logsBloom: string;
    transactionsRoot: string;
    stateRoot: string;
    receiptsRoot: string;
    miner: string;
    difficulty: string;
    totalDifficulty: string;
    extraData: string;
    size: string;
    gasLimit: string;
    gasUsed: string;
    timestamp: string;
    transactions: Array<JsonRpcTx | string>;
    uncles: string[];
    baseFeePerGas?: string;
    withdrawals?: Array<JsonRpcWithdrawal>;
    withdrawalsRoot?: string;
    blobGasUsed?: string;
    excessBlobGas?: string;
    parentBeaconBlockRoot?: string;
    executionWitness?: VerkleExecutionWitness | null;
}
export declare type WithdrawalV1 = {
    index: PrefixedHexString;
    validatorIndex: PrefixedHexString;
    address: PrefixedHexString;
    amount: PrefixedHexString;
};
export declare type ExecutionPayload = {
    parentHash: PrefixedHexString;
    feeRecipient: PrefixedHexString;
    stateRoot: PrefixedHexString;
    receiptsRoot: PrefixedHexString;
    logsBloom: PrefixedHexString;
    prevRandao: PrefixedHexString;
    blockNumber: PrefixedHexString;
    gasLimit: PrefixedHexString;
    gasUsed: PrefixedHexString;
    timestamp: PrefixedHexString;
    extraData: PrefixedHexString;
    baseFeePerGas: PrefixedHexString;
    blockHash: PrefixedHexString;
    transactions: PrefixedHexString[];
    withdrawals?: WithdrawalV1[];
    blobGasUsed?: PrefixedHexString;
    excessBlobGas?: PrefixedHexString;
    parentBeaconBlockRoot?: PrefixedHexString;
    executionWitness?: VerkleExecutionWitness | null;
};
//# sourceMappingURL=types.d.ts.map