{"version":3,"file":"block-tracker-inspector.js","sourceRoot":"","sources":["../src/block-tracker-inspector.ts"],"names":[],"mappings":";;;AACA,+DAAkE;AAQlE,mDAAoE;AAEpE,MAAM,GAAG,GAAG,IAAA,kCAAkB,EAAC,6BAAa,EAAE,yBAAyB,CAAC,CAAC;AACzE,MAAM,sBAAsB,GAAa;IACvC,0BAA0B;IAC1B,2BAA2B;CAC5B,CAAC;AAWF;;;;;;GAMG;AACH,SAAS,WAAW,CAClB,aAA4B,EAC5B,QAAkB;IAElB,OAAO,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;AAC7D,CAAC;AAED,SAAS,oBAAoB,CAC3B,QAAsC;IAEtC,MAAM,EAAE,MAAM,EAAE,GAAG,QAAQ,CAAC;IAC5B,IACE,CAAC,MAAM;QACP,OAAO,MAAM,KAAK,QAAQ;QAC1B,CAAC,WAAW,CAAC,MAAM,EAAE,aAAa,CAAC,EACnC;QACA,OAAO,SAAS,CAAC;KAClB;IAED,IAAI,OAAO,MAAM,CAAC,WAAW,KAAK,QAAQ,EAAE;QAC1C,OAAO,MAAM,CAAC,WAAW,CAAC;KAC3B;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,wEAAwE;AACxE,SAAgB,qCAAqC,CAAC,EACpD,YAAY,GAC2B;IAIvC,OAAO,IAAA,uCAAqB,EAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;QACpD,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YAChD,OAAO,IAAI,EAAE,CAAC;SACf;QACD,6CAA6C;QAC7C,MAAM,IAAI,EAAE,CAAC;QACb,wCAAwC;QACxC,MAAM,mBAAmB,GAAG,oBAAoB,CAAC,GAAG,CAAC,CAAC;QACtD,IAAI,CAAC,mBAAmB,EAAE;YACxB,OAAO,SAAS,CAAC;SAClB;QAED,GAAG,CAAC,qDAAqD,EAAE,GAAG,CAAC,CAAC;QAEhE,mEAAmE;QACnE,MAAM,WAAW,GAAW,MAAM,CAAC,QAAQ,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;QACrE,4FAA4F;QAC5F,MAAM,kBAAkB,GAAW,MAAM,CAAC,QAAQ,CAChD,YAAY,CAAC,eAAe,EAAS,EACrC,EAAE,CACH,CAAC;QACF,IAAI,WAAW,GAAG,kBAAkB,EAAE;YACpC,GAAG,CACD,iGAAiG,CAClG,CAAC;YACF,MAAM,YAAY,CAAC,mBAAmB,EAAE,CAAC;SAC1C;QACD,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC,CAAC;AACL,CAAC;AAnCD,sFAmCC","sourcesContent":["import type { JsonRpcMiddleware } from '@metamask/json-rpc-engine';\nimport { createAsyncMiddleware } from '@metamask/json-rpc-engine';\nimport type {\n  Json,\n  JsonRpcParams,\n  PendingJsonRpcResponse,\n} from '@metamask/utils';\nimport type { PollingBlockTracker } from 'eth-block-tracker';\n\nimport { projectLogger, createModuleLogger } from './logging-utils';\n\nconst log = createModuleLogger(projectLogger, 'block-tracker-inspector');\nconst futureBlockRefRequests: string[] = [\n  'eth_getTransactionByHash',\n  'eth_getTransactionReceipt',\n];\n\ninterface BlockTrackerInspectorMiddlewareOptions {\n  blockTracker: PollingBlockTracker;\n}\n\n/**\n * Any type that can be used as the name of an object property.\n */\ntype ValidPropertyType = string | number | symbol;\n\n/**\n * Determines whether the given object has the given property.\n *\n * @param objectToCheck - The object to check.\n * @param property - The property to look for.\n * @returns Whether the object has the property.\n */\nfunction hasProperty<ObjectToCheck, Property extends ValidPropertyType>(\n  objectToCheck: ObjectToCheck,\n  property: Property,\n): objectToCheck is ObjectToCheck & Record<Property, unknown> {\n  return Object.hasOwnProperty.call(objectToCheck, property);\n}\n\nfunction getResultBlockNumber(\n  response: PendingJsonRpcResponse<Json>,\n): string | undefined {\n  const { result } = response;\n  if (\n    !result ||\n    typeof result !== 'object' ||\n    !hasProperty(result, 'blockNumber')\n  ) {\n    return undefined;\n  }\n\n  if (typeof result.blockNumber === 'string') {\n    return result.blockNumber;\n  }\n  return undefined;\n}\n\n// inspect if response contains a block ref higher than our latest block\nexport function createBlockTrackerInspectorMiddleware({\n  blockTracker,\n}: BlockTrackerInspectorMiddlewareOptions): JsonRpcMiddleware<\n  JsonRpcParams,\n  Json\n> {\n  return createAsyncMiddleware(async (req, res, next) => {\n    if (!futureBlockRefRequests.includes(req.method)) {\n      return next();\n    }\n    // eslint-disable-next-line n/callback-return\n    await next();\n    // abort if no result or no block number\n    const responseBlockNumber = getResultBlockNumber(res);\n    if (!responseBlockNumber) {\n      return undefined;\n    }\n\n    log('res.result.blockNumber exists, proceeding. res = %o', res);\n\n    // if number is higher, suggest block-tracker check for a new block\n    const blockNumber: number = Number.parseInt(responseBlockNumber, 16);\n    // Typecast: If getCurrentBlock returns null, currentBlockNumber will be NaN, which is fine.\n    const currentBlockNumber: number = Number.parseInt(\n      blockTracker.getCurrentBlock() as any,\n      16,\n    );\n    if (blockNumber > currentBlockNumber) {\n      log(\n        'blockNumber from response is greater than current block number, refreshing current block number',\n      );\n      await blockTracker.checkForLatestBlock();\n    }\n    return undefined;\n  });\n}\n"]}