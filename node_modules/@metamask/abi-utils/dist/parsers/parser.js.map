{"version":3,"file":"parser.js","sourceRoot":"","sources":["../../src/parsers/parser.ts"],"names":[],"mappings":"","sourcesContent":["export type DynamicFunction = (type: string) => boolean;\n\nexport type EncodeArgs<Value> = {\n  /**\n   * The bytes to encode the value in.\n   */\n  buffer: Uint8Array;\n\n  /**\n   * The type of the value to encode.\n   */\n  type: string;\n\n  /**\n   * The value to encode.\n   */\n  value: Value;\n\n  /**\n   * Whether to use the non-standard packed mode.\n   */\n  packed: boolean;\n\n  /**\n   * Whether to use tight packing mode. Only applicable when `packed` is true.\n   */\n  tight: boolean;\n};\n\nexport type DecodeArgs = {\n  /**\n   * The type of the value to decode.\n   */\n  type: string;\n\n  /**\n   * The value to decode.\n   */\n  value: Uint8Array;\n\n  /**\n   * A function to skip a certain number of bytes for parsing. This is currently only used by static tuple types.\n   *\n   * @param length - The number of bytes to skip.\n   */\n  skip(length: number): void;\n};\n\nexport type Parser<EncodeValue = unknown, DecodeValue = EncodeValue> = {\n  isDynamic: boolean | DynamicFunction;\n\n  isType(type: string): boolean;\n  getByteLength(type: string): number;\n  encode(value: EncodeArgs<EncodeValue>): Uint8Array;\n  decode(args: DecodeArgs): DecodeValue;\n};\n"]}