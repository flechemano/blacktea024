{"version":3,"file":"retryOnEmpty.js","sourceRoot":"","sources":["../src/retryOnEmpty.ts"],"names":[],"mappings":"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","sourcesContent":["import type { SafeEventEmitterProvider } from '@metamask/eth-json-rpc-provider';\nimport type { JsonRpcMiddleware } from '@metamask/json-rpc-engine';\nimport { createAsyncMiddleware } from '@metamask/json-rpc-engine';\nimport type {\n  Json,\n  JsonRpcParams,\n  PendingJsonRpcResponse,\n} from '@metamask/utils';\nimport type { PollingBlockTracker } from 'eth-block-tracker';\nimport { klona } from 'klona/full';\nimport pify from 'pify';\n\nimport { projectLogger, createModuleLogger } from './logging-utils';\nimport type { Block } from './types';\nimport { blockTagParamIndex } from './utils/cache';\nimport { isExecutionRevertedError } from './utils/error';\nimport { timeout } from './utils/timeout';\n\n//\n// RetryOnEmptyMiddleware will retry any request with an empty response that has\n// a numbered block reference at or lower than the blockTracker's latest block.\n// Its useful for dealing with load-balanced ethereum JSON RPC\n// nodes that are not always in sync with each other.\n//\n\nconst log = createModuleLogger(projectLogger, 'retry-on-empty');\n// empty values used to determine if a request should be retried\n// `<nil>` comes from https://github.com/ethereum/go-ethereum/issues/16925\nconst emptyValues: (string | null | undefined)[] = [\n  undefined,\n  null,\n  '\\u003cnil\\u003e',\n];\n\ninterface RetryOnEmptyMiddlewareOptions {\n  provider?: SafeEventEmitterProvider;\n  blockTracker?: PollingBlockTracker;\n}\n\nexport function createRetryOnEmptyMiddleware({\n  provider,\n  blockTracker,\n}: RetryOnEmptyMiddlewareOptions = {}): JsonRpcMiddleware<JsonRpcParams, Json> {\n  if (!provider) {\n    throw Error(\n      'RetryOnEmptyMiddleware - mandatory \"provider\" option is missing.',\n    );\n  }\n\n  if (!blockTracker) {\n    throw Error(\n      'RetryOnEmptyMiddleware - mandatory \"blockTracker\" option is missing.',\n    );\n  }\n\n  return createAsyncMiddleware(async (req, res, next) => {\n    const blockRefIndex: number | undefined = blockTagParamIndex(req.method);\n    // skip if method does not include blockRef\n    if (blockRefIndex === undefined) {\n      return next();\n    }\n    // skip if not exact block references\n    let blockRef: string | undefined =\n      Array.isArray(req.params) && req.params[blockRefIndex]\n        ? (req.params[blockRefIndex] as string)\n        : undefined;\n    // omitted blockRef implies \"latest\"\n    if (blockRef === undefined) {\n      blockRef = 'latest';\n    }\n\n    // skip if non-number block reference\n    if (['latest', 'pending'].includes(blockRef)) {\n      return next();\n    }\n    // skip if block refernce is not a valid number\n    const blockRefNumber: number = Number.parseInt(blockRef.slice(2), 16);\n    if (Number.isNaN(blockRefNumber)) {\n      return next();\n    }\n    // lookup latest block\n    const latestBlockNumberHex: string = await blockTracker.getLatestBlock();\n    const latestBlockNumber: number = Number.parseInt(\n      latestBlockNumberHex.slice(2),\n      16,\n    );\n    // skip if request block number is higher than current\n    if (blockRefNumber > latestBlockNumber) {\n      log(\n        'Requested block number %o is higher than latest block number %o, falling through to original request',\n        blockRefNumber,\n        latestBlockNumber,\n      );\n      return next();\n    }\n\n    log(\n      'Requested block number %o is not higher than latest block number %o, trying request until non-empty response is received',\n      blockRefNumber,\n      latestBlockNumber,\n    );\n\n    // create child request with specific block-ref\n    const childRequest = klona(req);\n    // attempt child request until non-empty response is received\n    const childResponse: PendingJsonRpcResponse<Block> = await retry(\n      10,\n      async () => {\n        log('Performing request %o', childRequest);\n        const attemptResponse: PendingJsonRpcResponse<Block> = await pify(\n          provider.sendAsync,\n        ).call(provider, childRequest);\n        log('Response is %o', attemptResponse);\n        // verify result\n        if (emptyValues.includes(attemptResponse.result as any)) {\n          throw new Error(\n            `RetryOnEmptyMiddleware - empty response \"${JSON.stringify(\n              attemptResponse,\n            )}\" for request \"${JSON.stringify(childRequest)}\"`,\n          );\n        }\n        return attemptResponse;\n      },\n    );\n    log(\n      'Copying result %o and error %o',\n      childResponse.result,\n      childResponse.error,\n    );\n    // copy child response onto original response\n    res.result = childResponse.result;\n    res.error = childResponse.error;\n    return undefined;\n  });\n}\n\nasync function retry(\n  maxRetries: number,\n  asyncFn: () => Promise<PendingJsonRpcResponse<Block>>,\n): Promise<PendingJsonRpcResponse<Block>> {\n  for (let index = 0; index < maxRetries; index++) {\n    try {\n      return await asyncFn();\n    } catch (err: unknown) {\n      if (isExecutionRevertedError(err)) {\n        throw err as unknown;\n      }\n      log('(call %i) Request failed, waiting 1s to retry again...', index + 1);\n      await timeout(1000);\n    }\n  }\n  log('Retries exhausted');\n  throw new Error('RetryOnEmptyMiddleware - retries exhausted');\n}\n"]}